generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  password            String? // Added password field for credentials login
  age                 String?
  location            String?
  onboardingCompleted Boolean   @default(false)
  currentStreak       Int       @default(0)
  longestStreak       Int       @default(0)
  totalPoints         Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  submissions Submission[]
  badges      UserBadge[]
  aiTips      AiTip[]
  reports     Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Submission {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Transportation
  transportationType      String?
  transportationFrequency String?
  transportationDistance  String?
  transportationScore     Float   @default(0)

  // Energy
  electricityUnits String?
  renewableEnergy  Boolean @default(false)
  energyScore      Float   @default(0)

  // Water
  waterUsage String?
  waterScore Float   @default(0)

  // Diet
  dietType       String?
  meatIntakeFreq String?
  dietScore      Float   @default(0)

  // Food waste
  foodWasteLevel String?
  foodWasteScore Float   @default(0)

  // Shopping
  clothesPerMonth String?
  shoppingScore   Float   @default(0)

  // Waste
  recyclingHabits String?
  wasteScore      Float   @default(0)

  // Electronics
  streamingHabits  String?
  electronicsScore Float   @default(0)

  // Travel
  airTravelFreq String?
  travelScore   Float   @default(0)

  // Appliances
  applianceUsage String?
  applianceScore Float   @default(0)

  totalEmissionScore Float  @default(0)
  impactCategory     String @default("Medium") // Low, Medium, High

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AiTip {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title       String
  description String @db.Text
  category    String
  impact      String
  reasoning   String @db.Text

  createdAt DateTime @default(now())
}

model Badge {
  id          String @id @default(cuid())
  name        String @unique
  description String
  icon        String
  category    String
  requirement String

  users UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Report {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type      String // weekly, monthly, quarterly, yearly
  filename  String
  createdAt DateTime @default(now())
}

model Question {
  id       String  @id @default(cuid())
  category String
  question String
  type     String // select, radio, range
  options  Json?
  weight   Float   @default(1.0)
  isActive Boolean @default(true)
}
